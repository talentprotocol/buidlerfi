// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  wallet       String          @unique @db.VarChar(50)
  questions    Question[]      @relation("questioner")
  replies      Question[]      @relation("replier")
  inviteCode   InviteCode?
  registration Registration?
  comment      Comment[]
  socialData   UserSocialData?

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSocialData {
  userSocialData SocialData[]
  //Each social platform can have it's own avatar and name. One will be chosen as the main one
  avatarUrl      String?      @db.VarChar(255)
  displayName    String?      @db.VarChar(50)
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @unique

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//ens, farcaster, lens ...
model SocialData {
  dappName     String         @db.VarChar(50)
  profileName  String         @db.VarChar(50)
  profileImage String?        @db.VarChar(255)
  socialData   UserSocialData @relation(fields: [socialDataId], references: [id])
  socialDataId Int

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  questionContent String    @db.VarChar(500)
  replyContent    String?   @db.VarChar
  questioner      User      @relation("questioner", fields: [questionerId], references: [id])
  replier         User      @relation("replier", fields: [replierId], references: [id])
  questionerId    Int
  replierId       Int
  Comment         Comment[]

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  content    String   @db.VarChar(500)
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InviteCode {
  code        String         @unique @db.VarChar(50)
  user        User           @relation(fields: [userId], references: [id])
  userId      Int            @unique
  invitations Registration[]

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Registration {
  registeredUser   User        @relation(fields: [registeredUserId], references: [id])
  registeredUserId Int         @unique
  code             InviteCode? @relation(fields: [codeId], references: [id])
  codeId           Int?

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
